#ifndef __MIC184_H__
#define __MIC184_H__

#include <thermo/thermo-interface.h>
#include <i2c/i2c-interface.h>


// ВСЕ ТЕМПЕРАТУРЫ В ПАРАМЕТРАХ ФУНКЦИЙ ЗАДАЮТСЯ И ВОЗВРАЩАЮТСЯ В ФОРМАТЕ (ЗНАЧЕНИЕ * 1000)!


typedef struct _mic184_t
{
    thermoif_t      thermoif;
    
    uint8_t         mode;
    int             last_op;
    int             precision;
    i2cif_t         *i2c;
    i2c_message_t   msg;
} mic184_t;


// Функция инициализации драйвера mic184. Можно вызывать из uos_init().
// i2c          - указатель на драйвер шины i2c.
// i2c_addr     - адрес микросхемы на шине i2c (старшие 7 битов).
// i2c_timings  - режим времянки (таймингов) шины i2c; возможные значения:
//                      I2C_MODE_SM     - времянка Sm (Standard-mode);
//                      I2C_MODE_SMBUS  - времянка SMBUS;
// i2c_freq_khz - бодовая частота передачи на шине i2c в кГц.
void mic184_init(mic184_t *mic184, i2cif_t *i2c, uint8_t i2c_addr, 
    unsigned i2c_timings, unsigned i2c_freq_khz);

//
// Установка параметров mic184
//

// Макроопределения для параметра mode функции mic184_set_params
// (в соответствии с Table 2 спецификации версии 3).
// 1) Выключение, если бит установлен
#define MIC184_MODE_SHUTDOWN        (1 << 0)
// 2) Установка режима термостата (бит TM).
#define MIC184_MODE_COMPARATOR      (0 << 1)    // компаратор
#define MIC184_MODE_INTERRUPT       (1 << 1)    // прерывания
// 3) Полярность сигнала INT (бит POL).
#define MIC184_INT_ACTIVE_LOW       (0 << 2)    // активный низкий
#define MIC184_INT_ACTIVE_HIGH      (1 << 2)    // активный высокий
// 4) Количество чтений вне текущего диапазона перед переключением INT (биты F0, F1).
#define MIC184_INT_DEBOUNCE_1       (0 << 3)    // 1 чтение
#define MIC184_INT_DEBOUNCE_2       (1 << 3)    // 2 чтения
#define MIC184_INT_DEBOUNCE_4       (2 << 3)    // 4 чтения
#define MIC184_INT_DEBOUNCE_6       (3 << 3)    // 6 чтений

//
// Функция установки параметров MIC184.
// mode     - режим (битовое поле, см. макросы выше).
// Возвращает код завершения в соответствии с thermo-interface.h.
//
int mic184_set_mode(mic184_t *mic184, uint8_t mode);

//
// Функция установки точности измерения температуры.
// precision - точность из перечисления; поддерживается точность 0,5 градусов Цельсия
//             и 1 градус Цельсия. По умолчанию 1 градус Цельсия.
// При точности 0,5 градусов Цельсия выполняется передача дополнительного
// байта по I2C при каждом чтении показания температуры.
//
// После инициализации точность по умолчанию 0,5 градуса Цельсия!
//
enum
{
    MIC184_PRECISION_0_5_GRAD,
    MIC184_PRECISION_1_GRAD
};
void mic184_set_precision(mic184_t *mic184, int precision);

//
// Функция установки температур термостата.
// t_set    - при превышении данной температуры выход INT примет активный
//            уровень; температура задаётся в градусах Цельсия, умноженных на 1000.
// t_hyst   - при снижении температуры ниже данной выход INT примет пассивный
//            уровень; температура задаётся в градусах Цельсия, умноженных на 1000.
// Возвращает код завершения в соответствии с thermo-interface.h.
// Точность установки t_os и t_hyst - всегда 0,5 градусов Цельсия.
// 
// !!!
// Необходимо иметь в виду, что термостат в каждый момент времени отслеживает 
// температуру только активного датчика: внутреннего или внешнего.
// Активным является датчик, из которого в последний раз производилось чтение!
//
int mic184_set_thermostat(mic184_t *mic184, int t_set, int t_hyst);

//
// Чтение установки Tset. В случае ошибки возвращается значение (0x7FFFFFFF + код ошибки).
//
int mic184_read_t_set(mic184_t *mic184);

//
// Чтение установки Thyst. В случае ошибки возвращается значение (0x7FFFFFFF + код ошибки).
//
int mic184_read_t_hyst(mic184_t *mic184);

//
// Переключение датчика температуры.
// В случае ошибки возвращается значение (0x7FFFFFFF + код ошибки).
//
// Необходимо иметь в виду, что переключение датчика занимает время (вернее, обновление
// показаний температуры после переключения). В соответствии со спецификацией:
//      переключение на внутренний датчик:  160 мс;
//      переключение на внешний датчик:     320 мс.
//
enum
{
    MIC184_INTERNAL,
    MIC184_EXTERNAL
};
int mic184_switch_sensor(mic184_t *mic184, int sensor);

//
// Разрешение прерываний на выводе INT.
// Возвращает код завершения в соответствии с thermo-interface.h.
//
// После включения питания прерывания разрешены!
//
int mic184_interrupt_enable(mic184_t *mic184);

//
// Запрещение прерываний на выводе INT.
// Возвращает код завершения в соответствии с thermo-interface.h.
//
// После включения питания прерывания разрешены!
//
int mic184_interrupt_disable(mic184_t *mic184);

//
// Чтение наличия прерывания.
// Возвращает 1, в случае, если флаг прерывания установлен; 0, если флаг прерывания сброшен;
// в случае ошибки возвращается значение (0x7FFFFFFF + код ошибки).
//
// Чтение любого значения из датчика (в том числе вызов данной функции) приводит к 
// автоматическому сбросу флага прерывания!
//
int mic184_interrupt_status(mic184_t *mic184);

#endif // __MIC184_H__
